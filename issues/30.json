{"id":"MDEwOkRpc2N1c3Npb24zNDExNTgw","title":"人总是喜欢在固有思维下钻牛角尖","bodyHTML":"<p dir=\"auto\"><strong><code class=\"notranslate\">2021.02.28</code></strong></p>\n<p dir=\"auto\">最近这段时间写了一个基于 <code class=\"notranslate\">vite</code> 的 <code class=\"notranslate\">wasm-pack</code> (<code class=\"notranslate\">Rust -&gt; Wasm</code>) 插件，遇到一个比较有意思的问题。</p>\n<h3 dir=\"auto\">需求</h3>\n<p dir=\"auto\">实现一个 <code class=\"notranslate\">rsw 插件</code>，当 vite 服务启动后，插件会自动调用 <code class=\"notranslate\">wasm-pack</code> 的 cli，进行 build，生成 wasm 的 npm 包，当 rust 包目录下的文件变更时，能够进行重新进行 build (热更新)。</p>\n<h3 dir=\"auto\">问题</h3>\n<p dir=\"auto\">实现需求其实很简单，但是如果只是这样实现插件，虽然能用，但是体验不好。每次启动服务都会先执行 cli 的 build (耗时有点长)，vite 的快速启动开发环境的体验全无。其实不分析也知道，cli 的 build 并非每次启动都需要执行。如果已经 build 过，则不需要再次执行。</p>\n<p dir=\"auto\">于是，就有了第一版简单粗暴的实现方案，直接看目录中有没有 build 的文件存在，如果文件存在，则直接跳过执行，否则，执行 build。短短几行代码似乎就解决了问题。</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 核心代码：如果`package.json`存在则跳过执行\n// https://github.com/lencx/vite-plugin-rsw/blob/69668e9bdb8322382e5d49d3e85b67a35354d7e0/src/compiler.ts#L82-L88\nconst pkgPath = path.resolve(root, getCrateName(_crate), 'pkg');\n// vite startup optimization\ntry {\n  fs.statSync(`${pkgPath}/package.json`).isFile();\n  console.log(chalk.yellow(`[rsw::optimized] wasm-pack build ${getCrateName(_crate)}`));\n} catch (e) {\n  compileOne({ config: opts, crate: _crate, sync: true });\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// 核心代码：如果`package.json`存在则跳过执行</span>\n<span class=\"pl-c\">// https://github.com/lencx/vite-plugin-rsw/blob/69668e9bdb8322382e5d49d3e85b67a35354d7e0/src/compiler.ts#L82-L88</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">pkgPath</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">path</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">resolve</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">root</span><span class=\"pl-kos\">,</span> <span class=\"pl-en\">getCrateName</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">_crate</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'pkg'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c\">// vite startup optimization</span>\n<span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">fs</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">statSync</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">pkgPath</span><span class=\"pl-kos\">}</span></span>/package.json`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isFile</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">chalk</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">yellow</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`[rsw::optimized] wasm-pack build <span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-en\">getCrateName</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">_crate</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">compileOne</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">config</span>: <span class=\"pl-s1\">opts</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">crate</span>: <span class=\"pl-s1\">_crate</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">sync</span>: <span class=\"pl-c1\">true</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">但是很快就打脸了，有一种情况是未考虑到的，就是在停止服务后修改文件，当启动服务后，因为之前 build 的文件一直都存在，所以并不会执行 build，只有在启动服务后，修改文件，才会触发热更新。</p>\n<p dir=\"auto\">解决这个问题，我一直在想如何去缓存文件信息，做比较，如果两次文件内容都无变化，则文件未被修改过，但是又想到，如果文件特别多，<code class=\"notranslate\">存储读取</code>又会产生新的问题，感觉问题被复杂化了，但是却没什么头绪。</p>\n<p dir=\"auto\">和朋友讨论这个插件，朋友的一句话点醒了我。不需要存储读取文件，因为文件内容是不需要关心的，我们其实更关心的问题是文件是否被修改，而文件是否修改，可以通过查看文件修改时间。因为 build 是后于源码修改的，所以源码的修改时间一定小于 build 目录下的文件时间。如果源码修改时间大于了 build 目录下的文件时间。则表示文件修改了，但未执行 build。</p>\n<p dir=\"auto\">这也就有了下面这段代码</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 核心代码：比较文件变更时间\n// https://github.com/lencx/vite-plugin-rsw/blob/8aa0d68750/src/utils.ts#L85-L127\ntry {\n  // benchmark file modified time\n  const pkgMtime = fs.statSync(benchmarkFile).mtimeMs;\n  const cargoMtime = fs.statSync(cargoToml).mtimeMs;\n  let isOptim = true;\n\n  // run wasm-pack\n  if (cargoMtime &gt; pkgMtime) {\n    isOptim = false;\n    return runCallback();\n  }\n\n  (function dirsMtime(dir) {\n    for (let f of fs.readdirSync(dir)) {\n      const _f = fs.statSync(`${dir}/${f}`);\n\n      if (_f.isDirectory()) {\n        if (_f.mtimeMs &gt; pkgMtime) {\n          // run wasm-pack\n          isOptim = false;\n          runCallback();\n          break;\n        } else {\n          dirsMtime(`${dir}/${f}`)\n        }\n      }\n\n      if (_f.isFile()) {\n        if (_f.mtimeMs &gt; pkgMtime) {\n          // run wasm-pack\n          isOptim = false;\n          runCallback();\n          break;\n        }\n      }\n    }\n  })(dirs)\n\n  isOptim &amp;&amp; optimCallback();\n} catch(e) {\n  // no such file or directory\n  runCallback();\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// 核心代码：比较文件变更时间</span>\n<span class=\"pl-c\">// https://github.com/lencx/vite-plugin-rsw/blob/8aa0d68750/src/utils.ts#L85-L127</span>\n<span class=\"pl-k\">try</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// benchmark file modified time</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">pkgMtime</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fs</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">statSync</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">benchmarkFile</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">mtimeMs</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-s1\">cargoMtime</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fs</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">statSync</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">cargoToml</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">mtimeMs</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">isOptim</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">true</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c\">// run wasm-pack</span>\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">cargoMtime</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-s1\">pkgMtime</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">isOptim</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">runCallback</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n\n  <span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-en\">dirsMtime</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">dir</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">f</span> <span class=\"pl-k\">of</span> <span class=\"pl-s1\">fs</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">readdirSync</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">dir</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">const</span> <span class=\"pl-s1\">_f</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">fs</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">statSync</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">dir</span><span class=\"pl-kos\">}</span></span>/<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">f</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">_f</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isDirectory</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">_f</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">mtimeMs</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-s1\">pkgMtime</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-c\">// run wasm-pack</span>\n          <span class=\"pl-s1\">isOptim</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">;</span>\n          <span class=\"pl-en\">runCallback</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n          <span class=\"pl-k\">break</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-en\">dirsMtime</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">dir</span><span class=\"pl-kos\">}</span></span>/<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">f</span><span class=\"pl-kos\">}</span></span>`</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span>\n\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">_f</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isFile</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">_f</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">mtimeMs</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-s1\">pkgMtime</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n          <span class=\"pl-c\">// run wasm-pack</span>\n          <span class=\"pl-s1\">isOptim</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">false</span><span class=\"pl-kos\">;</span>\n          <span class=\"pl-en\">runCallback</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n          <span class=\"pl-k\">break</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n      <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">dirs</span><span class=\"pl-kos\">)</span>\n\n  <span class=\"pl-s1\">isOptim</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-en\">optimCallback</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span> <span class=\"pl-k\">catch</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">e</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">// no such file or directory</span>\n  <span class=\"pl-en\">runCallback</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h3 dir=\"auto\">总结</h3>\n<p dir=\"auto\">人很容易在固有思维下钻牛角尖，走到最后才发现自己虽然很努力，但似乎方向不太对。和朋友聊天，或者让自己放松一下，可能会有不一样的收获。</p>\n<h3 dir=\"auto\">相关链接</h3>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/lencx/vite-plugin-rsw\">vite-plugin-rsw</a></li>\n<li><a href=\"https://rustwasm.github.io/wasm-pack\" rel=\"nofollow\">wasm-pack</a></li>\n<li><a href=\"https://webassembly.org\" rel=\"nofollow\">wasm</a> - webAssembly的简称</li>\n<li><a href=\"https://vitejs.dev\" rel=\"nofollow\">vite</a> - 下一代前端构建工具</li>\n</ul>","category":{"name":"Notes"},"labels":{"edges":[{"node":{"id":"MDU6TGFiZWwzMDg2MDYxNzMz","name":"blog"}}]},"reactions":{"totalCount":0,"edges":[]},"comments":{"edges":[{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50ODY5MjM4","bodyHTML":"<p dir=\"auto\"><a href=\"https://github.com/amandakelake/blog/issues/41\" data-hovercard-type=\"issue\" data-hovercard-url=\"/amandakelake/blog/issues/41/hovercard\">协商缓存</a> - 当浏览器对某个资源的请求没有命中强缓存，就会发一个请求到服务器，验证协商缓存是否命中，如果协商缓存命中，请求响应返回的 http 状态为<code class=\"notranslate\">304</code> 并且会显示一个 <code class=\"notranslate\">Not Modified</code> 的字符串。协商缓存是利用的是【<code class=\"notranslate\">Last-Modified</code>，<code class=\"notranslate\">If-Modified-Since</code>】和【<code class=\"notranslate\">ETag</code>、<code class=\"notranslate\">If-None-Match</code>】这两对 <code class=\"notranslate\">Header</code> 来管理的。</p>\n<hr>\n<p dir=\"auto\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching\" rel=\"nofollow\">[MDN] HTTP 缓存</a></p>","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"replies":{"edges":[]}}}]}}