{"id":"MDEwOkRpc2N1c3Npb24zNDM0MDcz","title":"组件解耦的一些思考","bodyHTML":"<blockquote>\n<p dir=\"auto\">自前端三大框架 ( <a href=\"https://vuejs.org\" rel=\"nofollow\">Vue</a> , <a href=\"https://reactjs.org\" rel=\"nofollow\">React</a> , <a href=\"https://angular.io\" rel=\"nofollow\">Angular</a> ) 以及后起之秀 <a href=\"https://svelte.dev\" rel=\"nofollow\">Svelte</a> 出现之后，各种组件，轮子。大家都没少造过，一些大公司或者有精力的人，在研究 <code class=\"notranslate\">LowCode</code> 或 <code class=\"notranslate\">NoCode</code>，也有一些落地或者具体方案。</p>\n</blockquote>\n<h2 dir=\"auto\">背景</h2>\n<p dir=\"auto\">但就我自身经历及接触项目而言，项目还是停留在如何编写组件的层次上，简单的实现一些复用。一些历史项目因为需求的迭代，功能在不断增加，写代码的人员也在不断更替，交接。就会导致最后的接手项目的人痛苦不堪，<del>重构？不现实，时间不够，之前的需求也不清楚。继续保持？就面临着怎么去在原项目之上继续迭代。</del> 进退两难...</p>\n<p dir=\"auto\">在之前的需求毫不知情的情况下，如何完成需求功能的迭代，UI 改版？只能通过全局搜索一些关键词，关键字去一步步向上 debug 源码。如果代码中牵扯过多的业务逻辑，就完全懵逼了，没人知道之前的需求是什么?_?!!!</p>\n<p dir=\"auto\">以 React 为例，因为每个人都有自己对组件的理解，不同的人站在不同的维度去封装，就导致最后的项目结构，代码结构也是千差万别。</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">无状态组件</code>: 不涉及过多状态交互，很容易实现，大家的思路都差不多。</li>\n<li><code class=\"notranslate\">有状态组件</code>: 一旦涉及到状态，业务逻辑，交互。一个组件就变得不再可控。每个人的风格也都体现的淋漓尽致！\n<ul dir=\"auto\">\n<li>组件内发起请求，各种请求，大量接口相互依赖。如果涉及到多个接口并行，后一个接口依赖上一个接口的返回值，写法又是各有特色。</li>\n<li>出现大量的业务逻辑分支，根据业务 <code class=\"notranslate\">return</code> 出不同的组件 ╥﹏╥</li>\n<li>直接在组件内实现一个或多个子组件 (ノへ￣、)</li>\n<li>子组件上挂载着大量的 <code class=\"notranslate\">props</code>，属性有时候多到令人发指，有数据，方法，状态，自定义的 xxx，各种传递。 o(╥﹏╥)o</li>\n<li>欢迎大家继续补充吐槽...</li>\n</ul>\n</li>\n</ul>\n<h2 dir=\"auto\">思考</h2>\n<p dir=\"auto\">我对数据的理解，它既贴近于业务层，也耦合着交互层，如果不能很好的分离组织这三层，很可能牵一发而动全身。所以数据是核心，既是业务的核心，也是组件的核心。</p>\n<ul dir=\"auto\">\n<li>数据，业务逻辑，交互都会影响最终需要渲染的UI视图。</li>\n<li>编写组件时，首先分析业务需求，对组件进行分层。大致分为<code class=\"notranslate\">数据 (DataSource)</code>，<code class=\"notranslate\">交互 (Action)</code>，<code class=\"notranslate\">UI视图 (View)</code>三层。\n<ul dir=\"auto\">\n<li><strong>数据处理 (Handle)</strong>: 承载着核心业务逻辑，对数据进行格式化输出，供 UI 组件进行标准化接收，一般以 <code class=\"notranslate\">function</code> 形式存在。</li>\n<li><strong>副作用 (Effect)</strong>: 以我目前接触到的场景，主要还是以事件修改组件状态，更新数据及UI视图为主。所以事件及状态变更可能会同时出现在 <code class=\"notranslate\">数据处理</code> 和 <code class=\"notranslate\">UI 视图</code> 中。在数据处理中，<code class=\"notranslate\">调用 (Call)</code> 方法；在 UI 中，<code class=\"notranslate\">绑定 (Bind)</code> 事件及状态。UI 层尽量不直接处理或少处理源数据。</li>\n</ul>\n</li>\n</ul>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer nofollow\" href=\"https://user-images.githubusercontent.com/16164244/123594281-16ec3a80-d822-11eb-91e1-b2510590e26d.png\"><img width=\"420\" src=\"https://user-images.githubusercontent.com/16164244/123594281-16ec3a80-d822-11eb-91e1-b2510590e26d.png\" alt=\"组件拆分原则\" style=\"max-width: 100%;\"></a></p>\n<h2 dir=\"auto\">举例</h2>\n<ul dir=\"auto\">\n<li>业务中常会有这样一种需求，用户可以动态的新增删除一个列表，因为每次需要处理的数据，和展示的 UI 形式都是不确定的。可能我们每次做需求时都实现一次代码，或者把新增和删除方法提取出来，实现部分复用。以 <code class=\"notranslate\">React Hook</code> 为例：</li>\n</ul>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"/* hooks/useDataOP.js */\nimport { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport cloneDeep from 'lodash/cloneDeep';\n\n// 使用Symbol作为数据的唯一key\nconst safeKey = Symbol('tid');\n\n// 格式化源数据\nconst opFmtData = (data) =&gt; {\n  return cloneDeep(data).map((i) =&gt; {\n    i[safeKey] = uuidv4();\n    return i;\n  });\n};\n\n/**\n * useDataOP\n * @author lencx\n * @param rawData - 源数据\n */\nexport default function useDataOP(rawData = []) {\n  const [opData, setData] = useState([]);\n  const [opType, setType] = useState(null);\n  const [isOk, setOk] = useState(true);\n\n  // 数据初始化\n  useEffect(() =&gt; {\n    if (Array.isArray(rawData)) {\n      if (rawData.length &gt; 0) {\n        const data = opFmtData(rawData);\n        setData(data);\n      }\n      setOk(true);\n    } else {\n      setOk(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (!isOk) return console.error('Parameter must be an array!');\n\n  /**\n   * 新增\n   * @param data - 新增的数据对象\n   */\n  const opAdd = (data = {}) =&gt; {\n    const result = [...opData, { [safeKey]: uuidv4(), ...data }];\n    setData(result);\n    setType('add');\n    return result;\n  };\n\n  /**\n   * 删除\n   * @param value - 需要删除的值，如果为字符串或数字时，需要配合key使用。\n   *   如果value为对象，则为需要删除的记录，通过safeKey查找删除。\n   * @param key - 默认为id，选填，可省略\n   */\n  const opRemove = (value, key = 'id') =&gt; {\n    let result;\n    if (typeof value === 'string' || typeof value === 'number') {\n      result = opData.filter((i) =&gt; i[key] !== value);\n    } else {\n      result = opData.filter((i) =&gt; i[safeKey] !== value[safeKey]);\n    }\n    setData(result);\n    setType('remove');\n    return result;\n  };\n\n  /**\n   * 排序\n   * @param startIndex - 当前位置\n   * @param endIndex - 目标位置\n   */\n  const opReorder = (startIndex, endIndex) =&gt; {\n    const result = Array.from(opData);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    setData(result);\n    setType('reorder');\n    return result;\n  };\n\n  return {\n    opData,\n    opType,\n    opAdd,\n    opRemove,\n    opReorder,\n    opRawData: rawData,\n    opSafeKey: safeKey,\n  };\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">/* hooks/useDataOP.js */</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">useState</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">useEffect</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'react'</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">v4</span> <span class=\"pl-k\">as</span> <span class=\"pl-s1\">uuidv4</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'uuid'</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">cloneDeep</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'lodash/cloneDeep'</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// 使用Symbol作为数据的唯一key</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">safeKey</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Symbol</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'tid'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// 格式化源数据</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-en\">opFmtData</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-en\">cloneDeep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">i</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">safeKey</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">uuidv4</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">/**</span>\n<span class=\"pl-c\"> * useDataOP</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@author</span> lencx</span>\n<span class=\"pl-c\"> * <span class=\"pl-k\">@param</span> rawData - 源数据</span>\n<span class=\"pl-c\"> */</span>\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">useDataOP</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rawData</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">opData</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">setData</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useState</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">opType</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">setType</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useState</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">isOk</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">setOk</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useState</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c\">// 数据初始化</span>\n  <span class=\"pl-en\">useEffect</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rawData</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">rawData</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">const</span> <span class=\"pl-s1\">data</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">opFmtData</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">rawData</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-s1\">setData</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n      <span class=\"pl-kos\">}</span>\n      <span class=\"pl-s1\">setOk</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">setOk</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">false</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-c\">// eslint-disable-next-line react-hooks/exhaustive-deps</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-c1\">!</span><span class=\"pl-s1\">isOk</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">return</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">error</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Parameter must be an array!'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c\">/**</span>\n<span class=\"pl-c\">   * 新增</span>\n<span class=\"pl-c\">   * <span class=\"pl-k\">@param</span> data - 新增的数据对象</span>\n<span class=\"pl-c\">   */</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">opAdd</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span>...<span class=\"pl-s1\">opData</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">safeKey</span><span class=\"pl-kos\">]</span>: <span class=\"pl-en\">uuidv4</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">,</span> ...<span class=\"pl-s1\">data</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">setData</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">setType</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'add'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c\">/**</span>\n<span class=\"pl-c\">   * 删除</span>\n<span class=\"pl-c\">   * <span class=\"pl-k\">@param</span> value - 需要删除的值，如果为字符串或数字时，需要配合key使用。</span>\n<span class=\"pl-c\">   *   如果value为对象，则为需要删除的记录，通过safeKey查找删除。</span>\n<span class=\"pl-c\">   * <span class=\"pl-k\">@param</span> key - 默认为id，选填，可省略</span>\n<span class=\"pl-c\">   */</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">opRemove</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">key</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s\">'id'</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">value</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'string'</span> <span class=\"pl-c1\">||</span> <span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">value</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'number'</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">opData</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">filter</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">key</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s1\">value</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span> <span class=\"pl-k\">else</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">opData</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">filter</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">safeKey</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s1\">value</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">safeKey</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-s1\">setData</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">setType</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'remove'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c\">/**</span>\n<span class=\"pl-c\">   * 排序</span>\n<span class=\"pl-c\">   * <span class=\"pl-k\">@param</span> startIndex - 当前位置</span>\n<span class=\"pl-c\">   * <span class=\"pl-k\">@param</span> endIndex - 目标位置</span>\n<span class=\"pl-c\">   */</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">opReorder</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">startIndex</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">endIndex</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-s1\">result</span> <span class=\"pl-c1\">=</span> <span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">from</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">opData</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">removed</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">splice</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">startIndex</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">result</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">splice</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">endIndex</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">removed</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">setData</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">result</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-s1\">setType</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'reorder'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">result</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">{</span>\n    opData<span class=\"pl-kos\">,</span>\n    opType<span class=\"pl-kos\">,</span>\n    opAdd<span class=\"pl-kos\">,</span>\n    opRemove<span class=\"pl-kos\">,</span>\n    opReorder<span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">opRawData</span>: <span class=\"pl-s1\">rawData</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">opSafeKey</span>: <span class=\"pl-s1\">safeKey</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// 使用useDataOP\nimport React, { useState } from 'react';\nimport useDataOP from '@hooks/useDataOP';\n\nexport default () =&gt; {\n  const { opData, opAdd, opRemove, opReorder, opSafeKey } = useDataOP([]);\n  const [count, setCount] = useState(1);\n\n  const handleAdd = () =&gt; {\n    setCount(count+1);\n    opAdd({ name: `test${count}` });\n  }\n  return (\n    &lt;div&gt;\n      &lt;button onClick={handleAdd}&gt;Add&lt;/button&gt;\n      {opData.map((i, idx) =&gt; {\n        return (\n          &lt;div key={i[opSafeKey]}&gt;\n            &lt;span&gt;Name: {i.name}&lt;/span&gt;\n            {' '}\n            &lt;button onClick={() =&gt; opRemove(i)}&gt;Remove&lt;/button&gt;\n            &lt;button onClick={() =&gt; opReorder(idx, idx-1)}&gt;Up+1&lt;/button&gt;\n            &lt;button onClick={() =&gt; opReorder(idx, idx+1)}&gt;Down-1&lt;/button&gt;\n          &lt;/div&gt;\n        )\n      })}\n    &lt;/div&gt;\n  );\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// 使用useDataOP</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-v\">React</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">useState</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'react'</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">useDataOP</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'@hooks/useDataOP'</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">export</span> <span class=\"pl-k\">default</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">{</span> opData<span class=\"pl-kos\">,</span> opAdd<span class=\"pl-kos\">,</span> opRemove<span class=\"pl-kos\">,</span> opReorder<span class=\"pl-kos\">,</span> opSafeKey <span class=\"pl-kos\">}</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useDataOP</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">const</span> <span class=\"pl-kos\">[</span><span class=\"pl-s1\">count</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">setCount</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">useState</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-k\">const</span> <span class=\"pl-en\">handleAdd</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">setCount</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">count</span><span class=\"pl-c1\">+</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-en\">opAdd</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span> <span class=\"pl-c1\">name</span>: <span class=\"pl-s\">`test<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-s1\">count</span><span class=\"pl-kos\">}</span></span>`</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">div</span><span class=\"pl-c1\">&gt;</span>\n      <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">button</span> <span class=\"pl-c1\">onClick</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-en\">handleAdd</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">&gt;</span>Add<span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">button</span><span class=\"pl-c1\">&gt;</span>\n      <span class=\"pl-kos\">{</span><span class=\"pl-s1\">opData</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">idx</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-kos\">(</span>\n          <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">div</span> <span class=\"pl-c1\">key</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">opSafeKey</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">&gt;</span>\n            <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">span</span><span class=\"pl-c1\">&gt;</span>Name: <span class=\"pl-kos\">{</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">name</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">span</span><span class=\"pl-c1\">&gt;</span>\n            <span class=\"pl-kos\">{</span><span class=\"pl-s\">' '</span><span class=\"pl-kos\">}</span>\n            <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">button</span> <span class=\"pl-c1\">onClick</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">opRemove</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">&gt;</span>Remove<span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">button</span><span class=\"pl-c1\">&gt;</span>\n            <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">button</span> <span class=\"pl-c1\">onClick</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">opReorder</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">idx</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">idx</span><span class=\"pl-c1\">-</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">&gt;</span>Up+1<span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">button</span><span class=\"pl-c1\">&gt;</span>\n            <span class=\"pl-c1\">&lt;</span><span class=\"pl-ent\">button</span> <span class=\"pl-c1\">onClick</span><span class=\"pl-c1\">=</span><span class=\"pl-kos\">{</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">opReorder</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">idx</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">idx</span><span class=\"pl-c1\">+</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span><span class=\"pl-c1\">&gt;</span>Down-1<span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">button</span><span class=\"pl-c1\">&gt;</span>\n          <span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">div</span><span class=\"pl-c1\">&gt;</span>\n        <span class=\"pl-kos\">)</span>\n      <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">}</span>\n    <span class=\"pl-c1\">&lt;</span><span class=\"pl-c1\">/</span><span class=\"pl-ent\">div</span><span class=\"pl-c1\">&gt;</span>\n  <span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><a href=\"https://codesandbox.io/s/usedataop-wwe72\" rel=\"nofollow\">查看 DEMO 演示</a></p>\n<h2 dir=\"auto\">总结</h2>\n<p dir=\"auto\">数据与 UI 的解耦，其实就意味着业务逻辑与 UI 组件视图的解耦。当组件要跨平台，或者 UI 大换肤时，我们只需要实现标准的数据接收组件就可以了。业务功能对应的其实就是一个个数据处理函数和 UI 组件的组合，通过事件去触发或者绑定一些状态。当数据处理或组件不满足需求的时候，我们只需要去扩展对应的函数或组件。</p>","category":{"name":"Notes"},"labels":{"edges":[{"node":{"id":"MDU6TGFiZWwzMDQ1ODIxNzYx","name":"react"}},{"node":{"id":"MDU6TGFiZWwzMDg2MDYxNzMz","name":"blog"}}]},"reactions":{"totalCount":1,"edges":[{"node":{"id":"MDE4OkRpc2N1c3Npb25SZWFjdGlvbjE3NDEzNg==","content":"THUMBS_UP"}}]},"comments":{"edges":[{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50MTAyMDE4Mw==","bodyHTML":"<p dir=\"auto\">短时间内强行多次改版。。。第一版，数据是数据，业务是业务，交互是交互；第二版，数据是数据，业务和交互混合；第三版，数据业务交互混合。。。PM&amp;UI大声呼喊：我们的产品月越来越符合用户需求；前端coder小声嘀咕：终于又盖了一座屎山。</p>","author":{"login":"mJosen","avatarUrl":"https://avatars.githubusercontent.com/u/33922092?v=4","url":"https://github.com/mJosen"},"replies":{"edges":[{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50MTAyMDIzNQ==","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"bodyHTML":"<p dir=\"auto\">很难平衡，时间不够，很难把问题考虑到很全面，需求在不断迭代，问题会不断的暴露，唯一能做的就是让组件的职责单一，shi 山塌的晚一些。</p>"}}]}}}]}}