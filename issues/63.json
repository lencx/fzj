{"id":"MDEwOkRpc2N1c3Npb24zNTA1MDUw","title":"JS 手写系列","bodyHTML":"<blockquote>\n<p dir=\"auto\">Implementation of Native JavaScript Methods</p>\n</blockquote>\n<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"warning\">⚠️</g-emoji> 注意：不符合以下格式的评论将会被删除</p>\n<ul dir=\"auto\">\n<li>手写新（评论中不存在）的方法，建议新开评论，排版参考 <a href=\"https://github.com/lencx/z/discussions/63#discussioncomment-1137850\">forEach</a>\n<ul dir=\"auto\">\n<li>👉 方法名（必须）</li>\n<li>💠 语法（可须）</li>\n<li><g-emoji class=\"g-emoji\" alias=\"warning\">⚠️</g-emoji> 注意（可选）</li>\n<li>✍️ 实现（必须）</li>\n<li>📌 测试（必须）</li>\n<li>🔗 参考链接（可选）</li>\n</ul>\n</li>\n<li>针对某个手写方法的讨论，建议使用回复评论的形式</li>\n</ul>\n<hr>\n<p dir=\"auto\">查看源码 <a href=\"https://github.com/lencx/js-wheel\">js-wheel</a></p>\n<hr>\n<h2 dir=\"auto\">Standard</h2>\n<ul dir=\"auto\">\n<li>Promise</li>\n</ul>\n<details>\n<summary>Array</summary>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/lencx/z/discussions/63#discussioncomment-1137850\">forEach</a></li>\n<li><a href=\"https://github.com/lencx/z/discussions/63#discussioncomment-1138630\">map</a></li>\n<li>filter</li>\n<li>reduce</li>\n<li>every</li>\n<li>some</li>\n</ul>\n</details>\n<details>\n<summary>Function</summary>\n<ul dir=\"auto\">\n<li>call</li>\n<li>apply</li>\n<li>bind</li>\n</ul>\n</details>\n<details>\n<summary>Utils</summary>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/lencx/z/discussions/63#discussioncomment-1231964\">curry</a></li>\n<li><a href=\"https://github.com/lencx/z/discussions/63#discussioncomment-1167601\">sleep</a></li>\n</ul>\n</details>","category":{"name":"FE"},"labels":{"edges":[{"node":{"id":"MDU6TGFiZWwyMjk0NjQ2Mjcx","name":"js"}},{"node":{"id":"MDU6TGFiZWwzMDI2NDEyNzMy","name":"interview"}}]},"reactions":{"totalCount":0,"edges":[]},"comments":{"edges":[{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50MTEzNzg1MA==","bodyHTML":"<h3 dir=\"auto\">👉 forEach</h3>\n<blockquote>\n<p dir=\"auto\">forEach() 方法对数组的每个元素执行一次给定的函数</p>\n</blockquote>\n<h4 dir=\"auto\">💠 语法</h4>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"arr.forEach(callback(currentValue [, index [, array]])[, thisArg])\"><pre class=\"notranslate\"><span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">forEach</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">callback</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">currentValue</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">index</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">array</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">thisArg</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span></pre></div>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">callback</code> - 为数组中每个元素执行的函数，接收一至三个参数\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">currentValue</code> - 数组中正在处理的当前元素</li>\n<li><code class=\"notranslate\">index</code> [可选] - 数组中正在处理的当前元素的索引</li>\n<li><code class=\"notranslate\">array</code> [可选] - 调用 forEach() 方法的数组</li>\n</ul>\n</li>\n<li><code class=\"notranslate\">thisArg</code> [可选] - 当执行回调函数 callback 时，用作 this 的值</li>\n<li>返回值 - <code class=\"notranslate\">undefined</code></li>\n</ul>\n<h4 dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"warning\">⚠️</g-emoji> 注意</h4>\n<p dir=\"auto\">除了抛出异常以外，没有办法中止或跳出 forEach() 循环</p>\n<h4 dir=\"auto\">✍️ 实现</h4>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Array.prototype.myEach = function(callback) {\n  for (var i = 0; i &lt; this.length; i++) {\n    callback(this[i], i, this);\t\n  }\n}\"><pre class=\"notranslate\"><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">myEach</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">callback</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">var</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">callback</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\t\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h4 dir=\"auto\">📌 测试</h4>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"var arr = ['js', 'css', 'html'];\narr.myEach(function(item) {\n  console.log(item);\n})\"><pre class=\"notranslate\"><span class=\"pl-k\">var</span> <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-s\">'js'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'css'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s\">'html'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">myEach</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">item</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<hr>\n<h4 dir=\"auto\">🔗 参考链接</h4>\n<ul dir=\"auto\">\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList/forEach\" rel=\"nofollow\">[MDN] NodeList.prototype.forEach()</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"nofollow\">[MDN] Array.prototype.forEach()</a></li>\n</ul>","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"replies":{"edges":[{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50MTEzODA3Mw==","author":{"login":"MarukoAnn","avatarUrl":"https://avatars.githubusercontent.com/u/34764507?u=1e7c9167471a50c22517d0a908f5034c861cced0&v=4","url":"https://github.com/MarukoAnn"},"bodyHTML":"<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Array.prototype.myForEach = function(fn, args)  {\n   // 边界处理\n   if(this === null &amp;&amp; this === undefined &amp;&amp; !Array.isArray(this)){\n       throw new TypeError('type is error')\n   }\n    if(typeof fn !=='function'){\n        throw new TypeError(fn + 'is not function')\n     }\n   for(let i = 0; i&lt; this.length;i++){\n       fn.call(args, this[i], i, this)\n   }\n}\"><pre class=\"notranslate\"><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">myForEach</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span>  <span class=\"pl-kos\">{</span>\n   <span class=\"pl-c\">// 边界处理</span>\n   <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">null</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-smi\">this</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">undefined</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-c1\">!</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n       <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">TypeError</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'type is error'</span><span class=\"pl-kos\">)</span>\n   <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">!==</span><span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">TypeError</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">'is not function'</span><span class=\"pl-kos\">)</span>\n     <span class=\"pl-kos\">}</span>\n   <span class=\"pl-k\">for</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">&lt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span><span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n       <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">args</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span>\n   <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>"}},{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50MTEzODIxNw==","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"bodyHTML":"<p dir=\"auto\">@moonshinean 写箭头函数，<code class=\"notranslate\">this</code> 的指向是有问题的</p>\n<blockquote>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Array.prototype.myForEach = (fn, args) =&gt; {\n   // 边界处理\n   if(this === null &amp;&amp; this === undefined &amp;&amp; !Array.isArray(this)){\n       throw new TypeError('type is error')\n   }\n    if(typeof fn !=='function'){\n        throw new TypeError(fn + 'is not function')\n     }\n   for(let i = 0; i&lt; this.length;i++){\n       fn.call(args, this[i], i, this)\n   }\n}\"><pre class=\"notranslate\"><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">myForEach</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n   <span class=\"pl-c\">// 边界处理</span>\n   <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">null</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-smi\">this</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">undefined</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-c1\">!</span><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">isArray</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n       <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">TypeError</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'type is error'</span><span class=\"pl-kos\">)</span>\n   <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">if</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">!==</span><span class=\"pl-s\">'function'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">TypeError</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">fn</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s\">'is not function'</span><span class=\"pl-kos\">)</span>\n     <span class=\"pl-kos\">}</span>\n   <span class=\"pl-k\">for</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">&lt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span><span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">{</span>\n       <span class=\"pl-s1\">fn</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">args</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span>\n   <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n</blockquote>"}},{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50MTEzODIyNQ==","author":{"login":"MarukoAnn","avatarUrl":"https://avatars.githubusercontent.com/u/34764507?u=1e7c9167471a50c22517d0a908f5034c861cced0&v=4","url":"https://github.com/MarukoAnn"},"bodyHTML":"<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lencx/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lencx\">@lencx</a> 对哈 我改一下 改一下</p>"}}]}}},{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50MTEzODYzMA==","bodyHTML":"<h3 dir=\"auto\">👉 map</h3>\n<blockquote>\n<p dir=\"auto\">map() 方法创建一个新数组，其结果是该数组中的每个元素调用一次给定函数后的返回值</p>\n</blockquote>\n<h4 dir=\"auto\">💠 语法</h4>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"var new_array = arr.map(function callback(currentValue[, index[, array]]) {\n // Return element for new_array \n}[, thisArg])\"><pre class=\"notranslate\"><span class=\"pl-k\">var</span> <span class=\"pl-s1\">new_array</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">function</span> <span class=\"pl-en\">callback</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">currentValue</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">index</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">array</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n <span class=\"pl-c\">// Return element for new_array </span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">thisArg</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span></pre></div>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">callback</code> - 生成新数组元素的函数，接收一至三个参数\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">currentValue</code> - 数组中正在处理的当前元素</li>\n<li><code class=\"notranslate\">index</code> [可选] - 数组中正在处理的当前元素的索引</li>\n<li><code class=\"notranslate\">array</code> [可选] - 调用 map() 方法的数组</li>\n</ul>\n</li>\n<li><code class=\"notranslate\">thisArg</code> [可选] - 当执行回调函数 callback 时，用作 this 的值</li>\n<li>返回值 - 一个由原数组每个元素执行回调函数的结果组成的新数组</li>\n</ul>\n<h4 dir=\"auto\">✍️ 实现</h4>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Array.prototype.myMap = function(callback) {\n  arr = [];\n  for (var i = 0; i &lt; this.length; i++) {\n    arr[i] = callback(this[i], i, this);\n  }\n  return arr;\n}\"><pre class=\"notranslate\"><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">myMap</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">callback</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">var</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">callback</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h4 dir=\"auto\">📌 测试</h4>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"var arr = [1, 2, 3];\nvar newVal = arr.myMap(i =&gt; Math.pow(i, 2));\nconsole.log(newVal); // [1, 9, 16]\"><pre class=\"notranslate\"><span class=\"pl-k\">var</span> <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">newVal</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">myMap</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-v\">Math</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">pow</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newVal</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// [1, 9, 16]</span></pre></div>\n<hr>\n<h4 dir=\"auto\">🔗 参考链接</h4>\n<ul dir=\"auto\">\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" rel=\"nofollow\">[MDN] Array.prototype.map()</a></li>\n</ul>","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"replies":{"edges":[]}}},{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50MTE2NzYwMQ==","bodyHTML":"<h3 dir=\"auto\">👉 sleep</h3>\n<p dir=\"auto\">指定时间内函数暂停执行。 在 C 或 PHP 等编程语言中，可以调用 <code class=\"notranslate\">sleep(2)</code> 使程序暂停 2 秒。 Java 有 <code class=\"notranslate\">Thread.sleep(2000)</code>，Python 有 <code class=\"notranslate\">time.sleep(2)</code>，Go 有 <code class=\"notranslate\">time.Sleep(2 * time.Second)</code>。</p>\n<p dir=\"auto\">JavaScript 没有原生的休眠功能，但由于引入了 promises（以及 ES2018 中的 <code class=\"notranslate\">async/await</code>），我们可以用一种优雅地方式来实现此功能。</p>\n<h4 dir=\"auto\">✍️ 实现</h4>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function sleep(ms) {\n  return new Promise(resolve =&gt; setTimeout(resolve, ms));\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">ms</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-v\">Promise</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-en\">setTimeout</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">resolve</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">ms</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h4 dir=\"auto\">📌 测试</h4>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"async function testSleep() {\n  console.log('Taking a break...');\n  await sleep(2000);\n  console.log('Two seconds later, showing sleep in a loop...');\n\n  // Sleep in loop\n  for (let i = 0; i &lt; 5; i++) {\n    if (i === 3) await sleep(2000);\n    console.log(i);\n  }\n}\n\ntestSleep();\"><pre class=\"notranslate\"><span class=\"pl-k\">async</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">testSleep</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Taking a break...'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Two seconds later, showing sleep in a loop...'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n  <span class=\"pl-c\">// Sleep in loop</span>\n  <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">let</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-c1\">5</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span> <span class=\"pl-c1\">===</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">sleep</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2000</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">testSleep</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<hr>\n<h4 dir=\"auto\">🔗 参考链接</h4>\n<ul dir=\"auto\">\n<li><a href=\"https://stackoverflow.com/questions/951021/what-is-the-javascript-version-of-sleep\" rel=\"nofollow\">What is the JavaScript version of sleep()?</a></li>\n<li><a href=\"https://linux.die.net/man/3/sleep\" rel=\"nofollow\">[C] sleep(3) - Linux man page</a></li>\n<li><a href=\"https://www.php.net/manual/en/function.sleep.php\" rel=\"nofollow\">[PHP] sleep</a></li>\n<li><a href=\"https://docs.oracle.com/javase/tutorial/essential/concurrency/sleep.html\" rel=\"nofollow\">[Java] Pausing Execution with Sleep</a></li>\n<li><a href=\"https://docs.python.org/3/library/time.html#time.sleep\" rel=\"nofollow\">[Python] time.sleep(secs)</a></li>\n<li><a href=\"https://pkg.go.dev/time#Sleep\" rel=\"nofollow\">[Go] func Sleep</a></li>\n</ul>","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"replies":{"edges":[]}}},{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50MTE4OTU1NA==","bodyHTML":"<h2 dir=\"auto\">👉 filter</h2>\n<h3 dir=\"auto\">💠 语法</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])\"><pre class=\"notranslate\"><span class=\"pl-k\">var</span> <span class=\"pl-s1\">newArray</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">filter</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">callback</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">element</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">index</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">array</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">[</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">thisArg</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">)</span></pre></div>\n<h3 dir=\"auto\">✍️ 实现</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Array.prototype.myFilter = function(callback, context) {\n  var arr = [];\n  var idx = 0;\n  for (var i = 0; i &lt; this.length; i++) {\n  \tif (callback.call(context, this[i], i, this)) {\n  \t  arr[idx++] = this[i];\n  \t}\n  }\n  return arr;\n}\"><pre class=\"notranslate\"><span class=\"pl-v\">Array</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">prototype</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">myFilter</span> <span class=\"pl-c1\">=</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">callback</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">context</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">var</span> <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">var</span> <span class=\"pl-s1\">idx</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-k\">for</span> <span class=\"pl-kos\">(</span><span class=\"pl-k\">var</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=</span> <span class=\"pl-c1\">0</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&lt;</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">;</span> <span class=\"pl-s1\">i</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  \t<span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">callback</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">call</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">context</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">i</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  \t  <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">idx</span><span class=\"pl-c1\">++</span><span class=\"pl-kos\">]</span> <span class=\"pl-c1\">=</span> <span class=\"pl-smi\">this</span><span class=\"pl-kos\">[</span><span class=\"pl-s1\">i</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n  \t<span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h3 dir=\"auto\">📌 测试</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"var arr = [1, 2, 3, 4, 5];\nvar newVal = arr.myFilter(i =&gt; i &gt; 3);\nconsole.log(newVal); // [4, 5]\"><pre class=\"notranslate\"><span class=\"pl-k\">var</span> <span class=\"pl-s1\">arr</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">[</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">4</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">5</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">var</span> <span class=\"pl-s1\">newVal</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">arr</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">myFilter</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">i</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-s1\">i</span> <span class=\"pl-c1\">&gt;</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">newVal</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// [4, 5]</span></pre></div>\n<hr>\n<h3 dir=\"auto\">🔗 参考链接</h3>\n<ul dir=\"auto\">\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" rel=\"nofollow\">[MDN] Array.prototype.filter()</a></li>\n</ul>","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"replies":{"edges":[]}}},{"node":{"id":"MDE3OkRpc2N1c3Npb25Db21tZW50MTIzMTk2NA==","bodyHTML":"<h2 dir=\"auto\">👉 curry</h2>\n<p dir=\"auto\">在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。这个技术由克里斯托弗·斯特雷奇以逻辑学家哈斯凯尔·加里命名的，尽管它是 Moses Schönfinkel 和戈特洛布·弗雷格发明的。</p>\n<p dir=\"auto\"><code class=\"notranslate\">柯里化是将一个接受多个参数的函数分解成一系列函数，每个函数只接受一个参数。</code> 例如：将 <code class=\"notranslate\">f(a,b,c)</code> 变换为 <code class=\"notranslate\">f(a)(b)(c)</code> 。</p>\n<h3 dir=\"auto\">✍️ 实现</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function curry(func) {\n  return function curried(...args) {\n    // 如果参数的数量（args.length）大于或等于原函数中定义的参数数量（func.length），\n    // 则直接使用 func.apply 将参数传递。\n    if (args.length &gt;= func.length) {\n      return func.apply(this, args);\n    }\n    // 否则，我们只得到一部分参数，此时还未调用 func，\n    // 则返回一个新的匿名函数，重新柯里化，提供之前的参数（args）和当前匿名函数参数（args2）。\n    return function(...args2) {\n      return curried.apply(this, args.concat(args2));\n    };\n  };\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">curry</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">func</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span> <span class=\"pl-en\">curried</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// 如果参数的数量（args.length）大于或等于原函数中定义的参数数量（func.length），</span>\n    <span class=\"pl-c\">// 则直接使用 func.apply 将参数传递。</span>\n    <span class=\"pl-k\">if</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">args</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span> <span class=\"pl-c1\">&gt;=</span> <span class=\"pl-s1\">func</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">length</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">func</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-c\">// 否则，我们只得到一部分参数，此时还未调用 func，</span>\n    <span class=\"pl-c\">// 则返回一个新的匿名函数，重新柯里化，提供之前的参数（args）和当前匿名函数参数（args2）。</span>\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">function</span><span class=\"pl-kos\">(</span>...<span class=\"pl-s1\">args2</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">curried</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">apply</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">this</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">args</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">concat</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">args2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<h3 dir=\"auto\">📌 测试</h3>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"function sum(a, b, c) {\n  return a + b + c;\n}\n\nconst currySum = curry(sum);\n\ncurrySum(1, 2, 3); // 6 - 未柯里\ncurrySum(1)(2)(3); // 6 - 完全柯里\ncurrySum(1)(2, 3); // 6 - 第一个参数柯里\"><pre class=\"notranslate\"><span class=\"pl-k\">function</span> <span class=\"pl-en\">sum</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">b</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">c</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">return</span> <span class=\"pl-s1\">a</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">b</span> <span class=\"pl-c1\">+</span> <span class=\"pl-s1\">c</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-s1\">currySum</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">curry</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">sum</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-s1\">currySum</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// 6 - 未柯里</span>\n<span class=\"pl-s1\">currySum</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// 6 - 完全柯里</span>\n<span class=\"pl-s1\">currySum</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">3</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// 6 - 第一个参数柯里</span></pre></div>\n<hr>\n<h4 dir=\"auto\">🔗 参考链接</h4>\n<ul dir=\"auto\">\n<li><a href=\"https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96\" rel=\"nofollow\">[wiki] 柯里化</a></li>\n<li><a href=\"https://stackoverflow.com/questions/36314/what-is-currying\" rel=\"nofollow\">What is 'Currying'?</a></li>\n<li><a href=\"https://javascript.info/currying-partials\" rel=\"nofollow\">[javascript.info] currying</a></li>\n</ul>","author":{"login":"lencx","avatarUrl":"https://avatars.githubusercontent.com/u/16164244?u=77d1d01930d8e36105a49a6c474abf70eeee74b1&v=4","url":"https://github.com/lencx"},"replies":{"edges":[]}}}]}}