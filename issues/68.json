{"id":"MDEwOkRpc2N1c3Npb24zNTIxODUz","title":"基于 GitHub Discussions 的 Blog 框架","bodyHTML":"<p dir=\"auto\">我是一个喜欢折腾的人，虽然文章没写几篇，但是 Blog 框架没少折腾，刚入行那会用蹩脚的前端技术自己实现，<del>就感觉越花哨，越能证明自己的实力，各种大投影，大圆角，奇怪的字体...</del> 随着认知的提升，懂得了内容才是核心，页面开始变得不那么花哨，使用 <a href=\"https://hexo.io/\" rel=\"nofollow\">Hexo</a>，<a href=\"https://www.gatsbyjs.com/\" rel=\"nofollow\">Gatsby</a>，自己实现 <a href=\"https://github.com/lencx/nofwl\">nofwl 主题</a>。再到后来的 <a href=\"https://vuepress.vuejs.org/\" rel=\"nofollow\">vuepress</a>， <a href=\"https://vitepress.vuejs.org/\" rel=\"nofollow\">vitepress</a> 和 <a href=\"https://github.com/rust-lang/mdBook\">mdBook</a>。全都被我换了一遍，总是感觉不合自己胃口，于是就萌生了自己写 Blog 框架的想法。</p>\n<h3 dir=\"auto\">需求背景</h3>\n<p dir=\"auto\">我想做的 Blog 框架满足以下条件：</p>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">实时性</code> - 可以随时随地编辑，与平台无关，同时支持手机，电脑，本地，在线编辑等</li>\n<li><code class=\"notranslate\">所有权</code> - 我对数据的权限越大越好，这样我就可以根据自己的需要去渲染页面模版</li>\n<li><code class=\"notranslate\">公众号</code> - 可以生成微信公众号文章（微信链接不支持跳转，需要生成脚注或二维码）</li>\n<li><code class=\"notranslate\">RSS</code> - 支持 RSS 订阅</li>\n</ol>\n<h3 dir=\"auto\">技术栈</h3>\n<p dir=\"auto\">Blog 框架的搭建本身也是学习的过程，技术栈一定要前沿，因为我喜欢折腾。结合上面的需求背景，经过多方面比较，最终选择了 <code class=\"notranslate\">GitHub Discussions</code> 作为数据源。<code class=\"notranslate\">vite + react</code> 作为 Blog 基本框架。</p>\n<p dir=\"auto\">最终用到的技术包含：</p>\n<ul dir=\"auto\">\n<li><a href=\"https://docs.github.com/en/graphql/guides/using-the-graphql-api-for-discussions\">github discussions api</a> - 文章数据源，因为是接口请求，所以可以满足文章实时性及数据所有权需求</li>\n<li><a href=\"https://github.com/features/actions\">github actions</a> - 执行定时任务（生成 RSS 文件，JSON 数据文件，微信文章等），及网站部署</li>\n<li><code class=\"notranslate\">scripts</code> - 定时任务需要执行的脚本命令，用来满足公众号文章及 RSS 需求\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/lencx/rgd\">rgd</a> - 🍱 GitHub Discussions API - RSS &amp; JSON</li>\n<li><a href=\"https://github.com/lencx/woap\">woap</a> - 🌀 GitHub Discussions 生成微信文章 (支持二维码及脚注形式)</li>\n</ul>\n</li>\n<li><a href=\"https://www.apollographql.com/docs/react/\" rel=\"nofollow\">@apollo/client</a> - 是一个 JavaScript 状态管理库，能够使用 GraphQL 管理本地和远程数据。使用它来获取、缓存和修改应用程序数据，同时自动更新 UI。</li>\n<li><a href=\"https://vitejs.dev/\" rel=\"nofollow\">vite</a> - 下一代前端开发与构建工具</li>\n<li><a href=\"https://reactjs.org/\" rel=\"nofollow\">react</a> - 用于构建用户界面的 JavaScript 库</li>\n<li><a href=\"https://recoiljs.org/\" rel=\"nofollow\">recoil</a> - React 状态管理库</li>\n</ul>\n<h3 dir=\"auto\">常见问题</h3>\n<h4 dir=\"auto\">关于 Github Token</h4>\n<p dir=\"auto\">Blog 需要满足任何人在不经过 GitHub 登陆，或授权就可以访问网页，所以需要提供公共 <code class=\"notranslate\">Token</code> 来请求数据。因为 <a href=\"https://docs.github.com/cn/github/authenticating-to-github/keeping-your-account-and-data-secure/creating-a-personal-access-token\">GitHub Token</a> 存在每小时接口请求次数限制，超出请求次数会报错。官方文档建议缓存接口请求，但是整个 Blog 托管于 <a href=\"https://pages.github.com/\">GitHub Pages</a> ，并不能缓存接口请求。</p>\n<h5 dir=\"auto\">解决方案</h5>\n<p dir=\"auto\">使用 <code class=\"notranslate\">rgd</code> 将接口数据生成 JSON 文件。当网站请求 GitHub API 超过次数限制，会自动降级请求部署后项目中的 json 文件。同时支持两种模式是因为：请求接口网站是实时的（体验效果好），请求的 json 文件是非实时（每天跑一次定时任务）。</p>\n<h4 dir=\"auto\">关于 RSS</h4>\n<p dir=\"auto\">使用 <code class=\"notranslate\">rgd</code> 生成 RSS 文件，每天执行一次定时任务（非实时）。</p>\n<h4 dir=\"auto\">关于公众号</h4>\n<p dir=\"auto\">使用 <code class=\"notranslate\">woap</code> 生成微信文章，每天执行一次定时任务（非实时）。<code class=\"notranslate\">Discussions</code> 标签满足 <code class=\"notranslate\">woap</code> 的标签规则就会将该文生成为微信文章。</p>\n<h5 dir=\"auto\">标签规则</h5>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">wechat-link</code> - 微信链接转为二维码，适合多链接场景</li>\n<li><code class=\"notranslate\">wechat-post</code> - 微信链接转为脚注，适合多文字场景</li>\n</ul>\n<p dir=\"auto\">更多使用规则请查看 <a href=\"https://github.com/lencx/woap#%E5%8F%82%E6%95%B0\">woap 参数</a>。</p>\n<h3 dir=\"auto\">关于项目</h3>\n<ul dir=\"auto\">\n<li>查看源码 - <a href=\"https://github.com/lencx/z\">https://github.com/lencx/z</a></li>\n<li>网站体验 - <a href=\"https://lencx.tech\" rel=\"nofollow\">https://lencx.tech</a></li>\n</ul>","category":{"name":"Notes"},"labels":{"edges":[{"node":{"id":"MDU6TGFiZWwzMDg2MDYxNzMz","name":"blog"}},{"node":{"id":"MDU6TGFiZWwzMTk2OTc2MDIx","name":"wechat-post"}}]},"reactions":{"totalCount":1,"edges":[{"node":{"id":"MDE4OkRpc2N1c3Npb25SZWFjdGlvbjIxMzU1Ng==","content":"THUMBS_UP"}}]},"comments":{"edges":[]}}